#include <Servo.h> //[3104] Servo header File include

/////////////////////////////
// Configurable parameters //
/////////////////////////////

// Arduino pin assignment
#define PIN_LED 9 // [3110] 9번핀 LED 연결  
#define PIN_SERVO 10 // [3110] 10번핀 서보 연결
#define PIN_IR A0 //[3104] 적외선 거리센서 PIN - Analog0 정의 

// Framework setting
#define _DIST_TARGET 205//[3104] 탁구공을 위치 시킬 목표 
#define _DIST_MIN 72 //[3117] 거리 최소값
#define _DIST_MAX 410 //[3117] 거리 최대값

// Distance sensor
#define _DIST_ALPHA 0.5  //[3099] EMA 필터링을 위한 alpha 값
               // [3108] 0~1 사이의 값

#define _INTERVAL_DIST 30  // DELAY_MICROS * samples_num^2 의 값이 최종 거리측정 인터벌임. 넉넉하게 30ms 잡음.
#define DELAY_MICROS  1500 // 필터에 넣을 샘플값을 측정하는 딜레이(고정값!)
#define EMA_ALPHA 0.35     // EMA 필터 값을 결정하는 ALPHA 값. 작성자가 생각하는 최적값임.
float ema_dist=0;            // EMA 필터에 사용할 변수
float filtered_dist;       // 최종 측정된 거리값을 넣을 변수. loop()안에 filtered_dist = filtered_ir_distance(); 형태로 사용하면 됨.
float samples_num = 3;     // 스파이크 제거를 위한 부분필터에 샘플을 몇개 측정할 것인지. 3개로 충분함! 가능하면 수정하지 말 것.

// 기존에 제공된 ir_distance 함수. 변경사항 없음.
float ir_distance(void){ // return value unit: mm
  float val;
  float volt = float(analogRead(PIN_IR));
  val = ((6762.0/(volt-9.0))-4.0) * 10.0;
  return val;
}
// ================
float under_noise_filter(void){ // 아래로 떨어지는 형태의 스파이크를 제거해주는 필터
  int currReading;
  int largestReading = 0;
  for (int i = 0; i < samples_num; i++) {
    currReading = ir_distance();
    if (currReading > largestReading) { largestReading = currReading; }
    // Delay a short time before taking another reading
    delayMicroseconds(DELAY_MICROS);
  }
  return largestReading;
}

float filtered_ir_distance(void){ // 아래로 떨어지는 형태의 스파이크를 제거 후, 위로 치솟는 스파이크를 제거하고 EMA필터를 적용함.
  // under_noise_filter를 통과한 값을 upper_nosie_filter에 넣어 최종 값이 나옴.
  int currReading;
  int lowestReading = 1024;
  for (int i = 0; i < samples_num; i++) {
    currReading = under_noise_filter();
    if (currReading < lowestReading) { lowestReading = currReading; }
  }
  // eam 필터 추가
  ema_dist = EMA_ALPHA*lowestReading + (1-EMA_ALPHA)*ema_dist;
  return ema_dist;
}

// Distance sensor
float dist_target; // location to send the ball
float dist_raw, dist_ema; //[1928] 측정된 값과 ema 필터를 적용한 값

// Servo range
#define _DUTY_MIN 750     //[3100] 최저 서보 위치
#define _DUTY_NEU 1500//pid()    //[3100] 중립 서보 위치
#define _DUTY_MAX 2300     //[3100] 최대 서보 위치

// Servo speed control
#define _SERVO_ANGLE 500.0  
#define _SERVO_SPEED 400.0

// Event periods
#define _INTERVAL_DIST pid_time() //[3099] 각 event 사이에 지정한 시간 간격
#define _INTERVAL_SERVO pid_time()
#define _INTERVAL_SERIAL 100 

// PID parameters
#define _KP 1.2
#define _KD 40

// [3108] dist 100, 400mm 일때 값, 각자 a,b로 수정
#define a 130
#define b 410
//////////////////////
// global variables //
//////////////////////

// Servo instance
Servo myservo;

// Event periods
unsigned long last_sampling_time_dist, last_sampling_time_servo, last_sampling_time_serial; 
//[3104] 각 event의 진행 시간 저장 변수 
bool event_dist, event_servo, event_serial; 
//[3104] 각 event의 시간체크를 위한 변수 (ex_20초 주기 >> 0초(True,시작), 10초(False), 20초(True))

// Servo speed control
int duty_chg_per_interval; // [3116] 주기 당 서보 duty값 변화량
int duty_target, duty_curr; //[1928] 목표 위치와 현재 위치
// PID variables
float error_curr, error_prev, control, pterm, dterm, iterm;

//error_curr: 현재 측정값과 목표값의 차이
//error_prev: 직전에 구한 차이로, P제어에서는 사용하지 않을 것임
//control: PID제어의 결과로 얻은 제어값
//pterm: Proportional term, 현재 상태의 error값으로부터 얻은 Proportional gain을 저장하는 변수
// [3099]

void setup() {
// initialize GPIO pins for LED and attach servo 
myservo.attach(PIN_SERVO); // attach servo
pinMode(PIN_LED,OUTPUT); // initialize GPIO pins

// initialize global variables

// move servo to neutral position
myservo.writeMicroseconds(duty_target);
duty_curr = _DUTY_NEU;

// initialize serial port
Serial.begin(57600);

// convert angle speed into duty change per interval.
  duty_chg_per_interval  = (_DUTY_MAX - _DUTY_MIN) * (_SERVO_SPEED / (_SERVO_ANGLE * 2) * (_INTERVAL_SERVO / 1000.0));
}
  

void loop() {
/////////////////////
// Event generator //
///////////////////// 

filtered_dist = filtered_ir_distance();
dist_raw = ir_distance();

unsigned long time_curr = millis();
if(time_curr >= last_sampling_time_dist + _INTERVAL_DIST){
    last_sampling_time_dist += _INTERVAL_DIST;
    event_dist = true;
}

if(time_curr >= last_sampling_time_servo + _INTERVAL_SERVO ){
    last_sampling_time_servo += _INTERVAL_SERVO;
    event_servo = true;
}

if(time_curr >= last_sampling_time_serial + _INTERVAL_SERIAL ){
    last_sampling_time_serial += _INTERVAL_SERIAL;
    event_serial = true;
}

////////////////////
// Event handlers //
////////////////////

  if(event_dist) {
     event_dist = false;
  // get a distance reading from the distance sensor
     dist_ema = filtered_ir_distance(); //ir_distance_filtered();

  // PID control logic
    error_curr = dist_raw - _DIST_TARGET;
    pterm = _KP * error_curr;
  // [3099]
    iterm = 0; 
    dterm = _KD * (error_curr - error_prev);
    control = _KP * pterm + iterm + dterm;
    duty_target = _DUTY_NEU - control;
    //duty_target = f(duty_target, control)
    //duty_target = ((control>0)?(_DUTY_MAX - _DUTY_NEU)*_SERVO_ANGLE / 180.0:(_DUTY_NEU - _DUTY_MIN) * _SERVO_ANGLE / 180.0) * control;
  // [3099] 비례이득의 비대칭 해결가능
    //duty_target = _DUTY_NEU + control * ((control>0)?(_DUTY_MAX - _DUTY_NEU):(_DUTY_NEU - _DUTY_MIN));

    //Limit duty_target within the range of [_DUTY_MIN, _DUTY_MAX]
      if(duty_target < _DUTY_MIN) duty_target = _DUTY_MIN;
      if(duty_target > _DUTY_MAX) duty_target = _DUTY_MAX;

    //update error_prev
    error_prev = error_curr;
      

    /* duty_target = min(duty_target, _DUTY_MAX);
    duty_target = max(duty_target, _DUTY_MIN);
    // [3111] 범위 제한의 또다른 방법 */
  }
  
  if(event_servo) {
    event_servo=false;
    // adjust duty_curr toward duty_target by duty_chg_per_interval
    if(duty_target>duty_curr) {
  duty_curr += duty_chg_per_interval;
  if(duty_curr > duty_target) duty_curr = duty_target;
     }
    else {
  duty_curr -= duty_chg_per_interval;
  if(duty_curr < duty_target) duty_curr = duty_target;
    }
    // update servo position
     myservo.writeMicroseconds(duty_curr);
  }   

  if(event_serial) {
    event_serial = false;
    // 아래 출력문은 수정없이 모두 그대로 사용하기 바랍니다.
    Serial.print("dist_ir:");
    Serial.print(dist_raw);
    Serial.print(",pterm:");
    Serial.print(map(pterm,-1000,1000,510,610));
    Serial.print(",dterm:");
    Serial.print(map(dterm,-1000,1000,510,610));
    Serial.print(",duty_target:");
    Serial.print(map(duty_target,1000,2000,410,510));
    Serial.print(",duty_curr:");
    Serial.print(map(duty_curr,1000,2000,410,510));
    Serial.println(",Min:100,Low:200,dist_target:255,High:310,Max:410");
  }
}


float ir_distance_filtered(void){ // return value unit: mm
  dist_raw = ir_distance();
  return _DIST_ALPHA * dist_raw + (1 - _DIST_ALPHA) * dist_ema;
} 
/*
float pid(void){
  float value;

  if (150-dist_ema > 0){
    value = (150-dist_ema) * (150-dist_ema) *0.05 + 1550;
  }
  else {
    value = (150-dist_ema) * (150-dist_ema) *(-0.04) + 1550;
  }
  return value;
}
*/
float pid_time(void){
  float value;

  if (150-dist_ema > 0){
    value = (150 - dist_ema) * 0.3;
  }
  else {
    value = (dist_ema - 150) * 0.2;
  }
  return value;
}
